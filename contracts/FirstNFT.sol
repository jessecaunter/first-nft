// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "hardhat/console.sol";

// We inherit the contract we imported. This means we'll have access
// to the inherited contract's methods.
contract FirstNFT is ERC721URIStorage {
    // Magic given to us by OpenZeppelin to help us keep track of tokenIds.
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    // We need to pass the name of our NFTs token and it's symbol.
    constructor() ERC721 ("SquareNFT", "SQUARE") {
        console.log("This is my first NFT contract. Nice!");
    }

    // A function our user will hit to get their NFT.
    function makeAnEpicNFT() public {
        // Get the current tokenId, this starts at 0.
        uint256 newItemId = _tokenIds.current();

        // Actually mint the NFT to the sender using msg.sender.
        _safeMint(msg.sender, newItemId);

        // Set the NFTs data.
        _setTokenURI(newItemId, "data:application/json;base64,ewogICAgICJuYW1lIjogInNxdWFyZXMiLAogICAgICJkZXNjcmlwdGlvbiI6ICJUcmlwcHkgc3F1YXJlcyBpbiA4MHMgcGFzdGVsIiwKICAgICAiaW1hZ2UiOiAiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhodGJHNXpPbmhzYVc1clBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1TDNoc2FXNXJJaUI0Yld4dWN6cHphMlYwWTJocWN6MGlhSFIwY0hNNkx5OXphMlYwWTJndWFXOHZaSFJrTHlJZ2RtVnljMmx2YmowaU1TNHhJaUJ6YTJWMFkyaHFjenB0WlhSaFpHRjBZVDBpWlhsS2RWbFhNV3hKYW05cFRVUlJkMDV0UlRCUFZHTjBUVzFGTUUxcE1EQk9WMVV6VEZSc2FFNUVZM1JOYlZVelQwUlZNVmxVUW1wTlJHY3dURzVPY2xwWVVtcGhTRUpvV2tOSmMwbHVUakZqYlZwb1dUSlZhVTl1YzJsaVYxWXdZVWM1YTBscWIybGFiV3h6WWtOSmMwbHRTbk5hVnpWclNXcHZhV0p0T1hsaVYwWnpTV2wzYVZwWE5XaFpiWGhzV2tOSk5tUklTakZhVTNkcFlqTkNhRmt5YkRCbFUwazJUVk4zYVdSSWJIZGFVMGsyU1c1Q2FHUklVbXhqYlRScFRFTktkMWxZVWpCYVdFcDFTV3B3TjBsdVVqVmpSMVZwVDJsS2QxbFlVakJhV0VwMVNXbDNhV050Vm0xaVIxWnFaRU5KTmtsdE5YWk1XRXBzV20xNGJGa3pVV2xNUTBwNVdsaENiRmxZVVdsUGFVcDVXbGhDYkZsWVVXbE1RMHA2WWxjNWRtUkhhSEJpYldOcFQyMWFhR0pJVG14TVEwcDZZMjFOYVU5cFNqQmpiVVoxWXpOQ2FHTnRWblZrUlhod1dqSm9NRWxwZDJsak0yZHBUMnBGYzBsdVRqVkphbTk0VEVOS05FMURTVFpOUXpReFRFTktORTFUU1RaTlUzZHBaVlJCYVU5cVFYVk9VM2RwWlZSRmFVOXFSamxtVTNkcFdUSjRjR05HUW1oa1IyZHBUMjV6YVZwWE5XaFpiWGhzV2tOSk5tUklTakZhVTNkcFl6TlNOV0pIVldsUGJuTnBZek5TZVdJeWRHeFZNMUkxWWtkVmFVOXBTbWxpUjBacVlYbEpjMGx0ZUhCaWJWWllZVmRTTUdGRFNUWk5XREU1VEVOS2ExcFlUbXBqYld4M1pFZHNkbUpwU1RaSmF6Rm9Xa2RWWjJReWJEQmhRMEpVWVRKV01Ga3lhSGRaVjFGcFRFTktkRnBZVW1oYVIwWXdXVk5KTm1Vek1ITkpiVlkwWTBjNWVXUkZVbEZUVTBrMlRucEpjMGx0VmpSalJ6bDVaRVZhZG1OdE1XaGtRMGsyU1c1Q2RWcDVTWE5KYlZZMFkwYzVlV1JHUmpGWlYzaHdaRWhyYVU5cVFYVlBWRlZ6U1c1V2RXRllVbnBKYW05cFkwaG5hVXhEU2pOaFYxSXdZVU5KTms1RVFYZE1RMHB2V2xkc2JtRklVV2xQYWxGM1RVTjNhV05IUm01YVdFMXBUMngwTjBsdVpIQmFTRkp2U1dwdk1FMUVRWE5KYldoc1lWZGtiMlJEU1RaT1JFRjNabFl3YzBsdVZqRmhWMUZwVDJsSmVVNHlUVEpaYlZwc1Rua3hhRTVVU20xTVZGRXdUbFJqZEU5RVZYbFphVEZyVDBkTmVFNUVXbWhOVkZGNlQxUmphV1pSUFQwaUlIZHBaSFJvUFNJME1EQWlJR2hsYVdkb2REMGlOREF3SWlCMmFXVjNRbTk0UFNJd0lEQWdOREF3SURRd01DSWdjMnRsZEdOb2FuTTZkbVZ5YzJsdmJqMGlNakF5TVM0MExqSTFMakV4SWo0S1BIQmhkR2dnYzJ0bGRHTm9hbk02ZEc5dmJEMGljM0YxWVhKbElpQnpkSGxzWlQwaVptbHNiRG9nSTJJd1pqSmlORHNnYldsNExXSnNaVzVrTFcxdlpHVTZJSE52ZFhKalpTMXZkbVZ5T3lCbWFXeHNMVzl3WVdOcGRIazZJREU3SUhabFkzUnZjaTFsWm1abFkzUTZJRzV2YmkxelkyRnNhVzVuTFhOMGNtOXJaVHNpSUdROUlrMHdJREFnVERReE1pNHdNaUF3SURReE1pNHdNaUEwTVRJdU1ESWdNQ0EwTVRJdU1ESWdlaUlnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTUM0NU56RTJPVFF6TXpneE16VXhNVEkyTERBc01Dd3dMamszTVRZNU5ETXpPREV6TlRFeE1qWXNMVEF1TURRM09EQXpNREl5TlRNek5UY3hORGtzTFRBdU1EZ3lOalk0TnpjME5ETXhORFUwTURRcElpOCtDanh3WVhSb0lITnJaWFJqYUdwek9uUnZiMnc5SW5OeGRXRnlaU0lnYzNSNWJHVTlJbVpwYkd3NklDTmlZV1l5WlRrN0lHMXBlQzFpYkdWdVpDMXRiMlJsT2lCemIzVnlZMlV0YjNabGNqc2dabWxzYkMxdmNHRmphWFI1T2lBeE95QjJaV04wYjNJdFpXWm1aV04wT2lCdWIyNHRjMk5oYkdsdVp5MXpkSEp2YTJVN0lpQmtQU0pOTUNBd0lFd3lNekV1TURJZ01DQXlNekV1TURJZ01qTXhMakF5SURBZ01qTXhMakF5SUhvaUlIUnlZVzV6Wm05eWJUMGliV0YwY21sNEtDMHhMakU0TWpRME9USTFNemcyTnpneE16TXNNQzQ0TkRRMU16STROamt6TkRFeE5EVTFMQzB3TGpnME5EWXlPVFU1TWpBd05UUTRNaXd0TVM0eE9ESTFPRFEyTnpjME1qRXpPRGd5TERRek5TNHpNalE1T0RJMk1ERTNOREl6Tml3eU16a3VNVGM0TWprME5qSXdOemN4TWpNcElpOCtDanh3WVhSb0lITnJaWFJqYUdwek9uUnZiMnc5SW5OeGRXRnlaU0lnYzNSNWJHVTlJbVpwYkd3NklDTmlZV1EzWmpJN0lHMXBlQzFpYkdWdVpDMXRiMlJsT2lCemIzVnlZMlV0YjNabGNqc2dabWxzYkMxdmNHRmphWFI1T2lBeE95QjJaV04wYjNJdFpXWm1aV04wT2lCdWIyNHRjMk5oYkdsdVp5MXpkSEp2YTJVN0lpQmtQU0pOTUNBd0lFd3hNekFnTUNBeE16QWdNVE13SURBZ01UTXdJSG9pSUhSeVlXNXpabTl5YlQwaWJXRjBjbWw0S0RBdU56TTNNell6TURjeE5qZ3hNelk1T1N3eExqTTFNak14TURjMU1Ea3lNVE01T1N3dE1TNHpOVEl6TVRBM05UQTVNakV6T1Rrc01DNDNNemN6TmpNd056RTJPREV6TmprNUxESTBNQzQzTkRJd01EYzJNREV5TVRVNU5pdzJOQzR4TmpVek16SXlOVFUzTURZd05pa2lMejRLUEhCaGRHZ2djMnRsZEdOb2FuTTZkRzl2YkQwaWMzRjFZWEpsSWlCemRIbHNaVDBpWm1sc2JEb2dJMll5WW1Gak9Uc2diV2w0TFdKc1pXNWtMVzF2WkdVNklITnZkWEpqWlMxdmRtVnlPeUJtYVd4c0xXOXdZV05wZEhrNklERTdJSFpsWTNSdmNpMWxabVpsWTNRNklHNXZiaTF6WTJGc2FXNW5MWE4wY205clpUc2lJR1E5SWswd0lEQWdURFF4TGpBeElEQWdOREV1TURFZ05ERXVNREVnTUNBME1TNHdNU0I2SWlCMGNtRnVjMlp2Y20wOUltMWhkSEpwZUNndE1DNHdPRFkxTVRNeE5qY3lNRFF4T1RrMU5Td3lMalEwT0RVeU5qUTVOVE0xTURBMU5Dd3RNaTQwTkRnMU1qWTBPVFV6TlRBd05UUXNMVEF1TURnMk5URXpNVFkzTWpBME1UazVOVFVzTWpVekxqSXhOVEU0TVRrNU9UZzRPRFVzTVRVd0xqZzFNekUzTkRJMU1EZ3dPREF5S1NJdlBnbzhjR0YwYUNCemEyVjBZMmhxY3pwMGIyOXNQU0p6Y1hWaGNtVWlJSE4wZVd4bFBTSm1hV3hzT2lBalpqSmxNbUpoT3lCdGFYZ3RZbXhsYm1RdGJXOWtaVG9nYzI5MWNtTmxMVzkyWlhJN0lHWnBiR3d0YjNCaFkybDBlVG9nTVRzZ2RtVmpkRzl5TFdWbVptVmpkRG9nYm05dUxYTmpZV3hwYm1jdGMzUnliMnRsT3lJZ1pEMGlUVEFnTUNCTU1qY3VNRElnTUNBeU55NHdNaUF5Tnk0d01pQXdJREkzTGpBeUlIb2lJSFJ5WVc1elptOXliVDBpYldGMGNtbDRLREV1TXpZME9EQTBOell5T0RRM01USTBNeXd0TUM0Mk5EQTBOelE1TXpJd056VTNOell4TERBdU5qUXdORGMwT1RNeU1EYzFOemMyTVN3eExqTTJORGd3TkRjMk1qZzBOekV5TkRNc01UYzBMalUwTXpJNU1URTVOemszTXprNUxERTVNUzR4TlRFME5UY3pNek01TURJeU55a2lMejRLUEhCaGRHZ2djMnRsZEdOb2FuTTZkRzl2YkQwaWNHVnVZMmxzSWlCemRIbHNaVDBpWm1sc2JEb2dibTl1WlRzZ2MzUnliMnRsT2lBalltRm1NbVU1T3lCdGFYZ3RZbXhsYm1RdGJXOWtaVG9nYzI5MWNtTmxMVzkyWlhJN0lITjBjbTlyWlMxa1lYTm9ZWEp5WVhrNklHNXZibVU3SUhOMGNtOXJaUzFrWVhOb2IyWm1jMlYwT2lBd095QnpkSEp2YTJVdGJHbHVaV05oY0RvZ2NtOTFibVE3SUhOMGNtOXJaUzFzYVc1bGFtOXBiam9nYldsMFpYSTdJSE4wY205clpTMXRhWFJsY214cGJXbDBPaUEwT3lCemRISnZhMlV0YjNCaFkybDBlVG9nTVRzZ2MzUnliMnRsTFhkcFpIUm9PaUF4TGpFN0lpQmtQU0pOTnk0eU1TQXpMalU1SUVNM0xqSXhJRE11TlRrZ05pNDBPU0F6TGpVNUlEWXVNalVnTXk0MU9TQTJMakVnTXk0MU9TQTJMakF5SURNdU5Ua2dOUzQ1SURNdU5Ua2dOUzQzT0NBekxqVTVJRFV1TmpnZ015NDJJRFV1TlRRZ015NDFPU0ExTGpNMklETXVOVGdnTlM0d09TQXpMalUxSURRdU9UTWdNeTQxTWlBMExqZ3pJRE11TlNBMExqYzRJRE11TkRnZ05DNDJPU0F6TGpRMUlEUXVOVFlnTXk0ME1TQTBMak15SURNdU16UWdOQzR5TVNBekxqTXlJRFF1TVRZZ015NHpNU0EwTGpFeklETXVNekVnTkM0d09TQXpMak1nTkM0d05DQXpMakk1SURRZ015NHlOeUF6TGprMUlETXVNalVnTXk0NUlETXVNak1nTXk0NE5pQXpMakl4SURNdU9ERWdNeTR4TnlBekxqYzFJRE11TVRNZ015NDJOaUF6TGpBMElETXVOalFnTXlBekxqWXpJREl1T1RrZ015NDJNeUF5TGprNUlETXVOak1nTWk0NU55QXpMall6SURJdU9Ea2dNeTQ0TWlBeUxqUTBJRE11T1RVZ01pNHlOQ0EwTGpBMklESXVNRGNnTkM0eE55QXhMamsySURRdU16UWdNUzQ0TWlBMExqVTNJREV1TmpNZ05DNDVOaUF4TGpRMElEVXVNak1nTVM0eU55QTFMalExSURFdU1UTWdOUzQySURFdU1ESWdOUzQ0TXlBd0xqa2dOaTR4TXlBd0xqYzFJRFl1TlRVZ01DNDJNU0EyTGpnNElEQXVORGtnTnk0eE55QXdMak01SURjdU5EY2dNQzR6SURjdU56RWdNQzR5TXlBM0xqZzVJREF1TVRnZ09DNHdNU0F3TGpFeklEZ3VNVGdnTUM0eElEZ3VNemtnTUM0d05pQTRMalk1SURBdU1EUWdPQzQ0T1NBd0xqQXpJRGt1TURNZ01DNHdNaUE1TGpFeElEQXVNRElnT1M0eU5TQXdMakF5SURrdU5ESWdNQzR3TWlBNUxqY2dNQzR3TVNBNUxqZzFJREF1TURFZ09TNDVOU0F3TGpBeElERXdMakF4SUMwd0xqQXhJREV3TGpBNUlEQWdNVEF1TVRjZ01DNHdNU0F4TUM0eU5pQXdMakEwSURFd0xqTXpJREF1TURVZ01UQXVNemdnTUM0d05pQXhNQzQwTVNBd0xqQTFJREV3TGpRMUlEQXVNRGNnTVRBdU5TQXdMakE1SURFd0xqVTVJREF1TVRNZ01UQXVOaklnTUM0eE55QXhNQzQyTlNBd0xqSWdNVEF1TmpZZ01DNHlNaUF4TUM0Mk5pQXdMakkzSURFd0xqWTJJREF1TkRJZ01UQXVORGdnTUM0NU15QXhNQzR6TXlBeExqSXlJREV3TGpFNUlERXVOU0F4TUM0d05DQXhMamN4SURrdU9ERWdNUzQ1T0NBNUxqUTVJREl1TXpZZ09TNHdNU0F5TGpneElEZ3VOVFVnTXk0eU1pQTRMakEwSURNdU5qY2dOeTR6TXlBMExqSWdOaTQ0T1NBMExqVTJJRFl1TmlBMExqZ2dOaTQwTkNBMExqazFJRFl1TVRjZ05TNHhOaUExTGpneklEVXVORE1nTlM0ek1pQTFMamMzSURRdU9Ua2dOaTR3TWlBMExqYzFJRFl1TWlBMExqWXhJRFl1TXpNZ05DNHpPQ0EyTGpRNUlEUXVNU0EyTGpZNUlETXVOamdnTmk0NU15QXpMalEwSURjdU1URWdNeTR5T0NBM0xqSXpJRE11TWpFZ055NHpNU0F6TGpBMklEY3VORE1nTWk0NE5pQTNMalU0SURJdU5UY2dOeTQ0TVNBeUxqTTJJRGN1T1RNZ01pNHlJRGd1TURJZ01pNHdOeUE0TGpBMUlERXVPVEVnT0M0eE1pQXhMamN6SURndU1pQXhMalEzSURndU15QXhMak15SURndU16Y2dNUzR5TWlBNExqUXhJREV1TVRZZ09DNDBOU0F4TGpBM0lEZ3VORGdnTUM0NU55QTRMalV4SURBdU9ESWdPQzQxTXlBd0xqYzBJRGd1TlRVZ01DNDJPU0E0TGpVMklEQXVOamNnT0M0MU5pQXdMall5SURndU5UY2dNQzQxTXlBNExqVTVJREF1TXpjZ09DNDJOQ0F3TGpJMklEZ3VOallnTUM0eE55QTRMalk0SURBdU1ESWdPQzQyT1NBd0xqQXlJRGd1TmprZ01DNHdNaUE0TGpZNUlEQXVNRElnT0M0Mk9TQXdMakF5SURndU5qa2dNQzR3TWlBNExqWTVJREFnT0M0Mk5DQXdJRGd1TmpFZ01DQTRMalUxSURBdU1ERWdPQzQwTnlBd0xqQTJJRGd1TXpjZ01DNHhOeUE0TGpFMUlEQXVOakVnTnk0Mk9TQXdMamczSURjdU5EVWdNUzR3TmlBM0xqSTNJREV1TWpFZ055NHlJREV1TkRJZ055NHdOQ0F4TGpZNUlEWXVPRE1nTWk0d09TQTJMalVnTWk0ek55QTJMak15SURJdU5UZ2dOaTR4T1NBeUxqY3lJRFl1TVRNZ01pNDVOQ0EyTGpBeklETXVNalFnTlM0NUlETXVOeUExTGpjeklEUWdOUzQyTXlBMExqSXlJRFV1TlRZZ05DNHpOaUExTGpVMElEUXVOVGtnTlM0ME9DQTBMamtnTlM0ME1TQTFMak0ySURVdU15QTFMalkzSURVdU1qTWdOUzQ1SURVdU1UZ2dOaTR3TlNBMUxqRTBJRFl1TWpZZ05TNHhJRFl1TkRrZ05TNHdOU0EyTGpjMklEVWdOaTQ1T0NBMExqazNJRGN1TVRVZ05DNDVOU0EzTGpNMElEUXVPVFFnTnk0ME5TQTBMamswSURjdU5URWdOQzQ1TkNBM0xqVXpJRFF1T1RVZ055NDFPQ0EwTGprMklEY3VOalVnTkM0NU9DQTNMamMySURVdU1ESWdOeTQ0TXlBMUxqQTBJRGN1T0RjZ05TNHdOU0EzTGpnNUlEVXVNRFlnTnk0NU5DQTFMakEzSURndU1ESWdOUzR3T1NBNExqSWdOUzR3T1NBNExqSTVJRFV1TVRFZ09DNHpOU0ExTGpFeUlEZ3VNemNnTlM0eE5DQTRMalF6SURVdU1UVWdPQzQxTmlBMUxqRTRJRGd1T0RZZ05TNHlJRGt1TURFZ05TNHlNeUE1TGpFeElEVXVNalVnT1M0eE5pQTFMakkzSURrdU1qWWdOUzR5T1NBNUxqUXhJRFV1TXpJZ09TNDNJRFV1TXpRZ09TNDROU0ExTGpNMUlEa3VPVFVnTlM0ek5pQTVMams1SURVdU16Y2dNVEF1TURrZ05TNHpOeUF4TUM0eU5TQTFMak0zSURFd0xqVWdOUzR6TkNBeE1DNDJPU0ExTGpNeElERXdMamcySURVdU1qa2dNVEF1T1RrZ05TNHlPQ0F4TVM0eE55QTFMakl5SURFeExqUTBJRFV1TVRRZ01URXVPRGdnTkM0NU1TQXhNaTR4TlNBMExqZ3hJREV5TGpNeklEUXVOelFnTVRJdU5EVWdOQzQzTWlBeE1pNDJNaUEwTGpZMklERXlMamd4SURRdU5pQXhNeTR3TmlBMExqVWdNVE11TWpJZ05DNDBOQ0F4TXk0ek1pQTBMalFnTVRNdU16Z2dOQzR6TnlBeE15NDBOeUEwTGpNeklERXpMalU0SURRdU1qa2dNVE11TnpFZ05DNHlNeUF4TXk0NE1pQTBMaklnTVRNdU9TQTBMakU0SURFekxqazJJRFF1TVRZZ01UUXVNRFVnTkM0eE5TQXhOQzR4T0NBMExqRXpJREUwTGpNM0lEUXVNU0F4TkM0MU1pQTBMakVnTVRRdU5qVWdOQzR4SURFMExqYzFJRFF1TVRRZ01UUXVPRGdnTkM0eE5TQXhOUzR3TXlBMExqRTJJREUxTGpJeElEUXVNVFVnTVRVdU16WWdOQzR4TnlBeE5TNDBPU0EwTGpFNUlERTFMall4SURRdU1qRWdNVFV1TnpJZ05DNHlOQ0F4TlM0NE1TQTBMakkySURFMUxqZzRJRFF1TXlBeE5TNDVOeUEwTGpNeUlERTJMakE0SURRdU16VWdNVFl1TWlBMExqTTNJREUyTGpNeUlEUXVNemdnTVRZdU5EUWdOQzR6T1NBeE5pNDFNeUEwTGpRZ01UWXVOamdnTkM0MElERTJMamswSURRdU5DQXhOeTQwT1NBMExqTTJJREUzTGpjMUlEUXVNek1nTVRjdU9URWdOQzR6TVNBeE55NDVOeUEwTGpJNElERTRMakV5SURRdU1qWWdNVGd1TXpRZ05DNHlNeUF4T0M0M015QTBMakl5SURFNExqazFJRFF1TWpFZ01Ua3VNRGtnTkM0eUlERTVMakU0SURRdU1pQXhPUzR6TVNBMExqSWdNVGt1TkRZZ05DNHlJREU1TGpZMElEUXVNaUF4T1M0M09TQTBMaklnTVRrdU9USWdOQzR5SURJd0xqQXlJRFF1TVRnZ01qQXVNVFVnTkM0eE9TQXlNQzR6TWlBMExqSWdNakF1TlRrZ05DNHlOaUF5TUM0M05TQTBMakkzSURJd0xqZzFJRFF1TWpnZ01qQXVPRGtnTkM0eU5pQXlNQzQ1T1NBMExqSTRJREl4TGpFMUlEUXVNeUF5TVM0ME1pQTBMalFnTWpFdU5pQTBMalExSURJeExqYzBJRFF1TkRrZ01qRXVPREVnTkM0MU1pQXlNUzQ1TmlBMExqVTJJREl5TGpFNElEUXVOak1nTWpJdU5URWdOQzQzTkNBeU1pNDRJRFF1T0RFZ01qTXVNU0EwTGpnNElESXpMalV4SURRdU9UUWdNak11TnpVZ05DNDVOeUF5TXk0NE9TQTBMams1SURJMExqQXhJRFF1T1RnZ01qUXVNU0ExSURJMExqRTJJRFV1TURFZ01qUXVNalFnTlM0d05DQXlOQzR5TkNBMUxqQTBJQ0lnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTVN3d0xEQXNNU3d6TVRJdU5qWTBPVEl5T0N3ek56TXVNemN4TURFME56QXdNREF3TURVcElpOCtDand2YzNablBnPT0iCn0=");
        console.log("An NFT w/ ID %s has been minted to %s", newItemId, msg.sender);

        // Increment the counter for when the next NFT is minted.
        _tokenIds.increment();
    }
}
